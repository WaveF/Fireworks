// JavaScript for Fireworks
// access the command through Commands > Matrix
// use 'Manage Saved Commands...' from Commands menu to delete existing commands

(function(){
  var dom = fw.getDocumentDOM();

  var s = fw.selection;
  if(s.length<1){return}
  if(s.length>1){dom.group("normal");s=fw.selection}
  var userData = prompt("请依次输入横向、纵向的克隆后数量与水平、垂直间距值，以逗号分隔：","6,4,10,10");
  userData = userData.split(",");

  var newSel=[];
  newSel.push(s[0]);
  for(var i=0; i<Number(parseInt(userData[0])-1); i++){
    dom.cloneSelection();
    newSel.push(fw.selection[0]);
  }
  fw.selection = newSel;
  Space(1, parseInt(userData[2]), false);
  dom.group("normal");
  
  var newSel=[];
  newSel.push(fw.selection[0]);
  for(i=0; i<Number(parseInt(userData[1])-1); i++){
    dom.cloneSelection();
    newSel.push(fw.selection[0]);
  }
  fw.selection = newSel;
  Space(0, parseInt(userData[3]), false);
  dom.ungroup();
})();

function Space(m, d, p) {
	var N = fw.selection.length;
	var s = new Array();
	var s_ = new Array();
	var i, j, x, y, dx, dy;
	for (i = 0; i < N; i++) s_.push({
		idx: i,
		x: fw.selection[i].left,
		y: fw.selection[i].top
	});
	while (s.length != N) {
		x = Number.MAX_VALUE;
		y = Number.MAX_VALUE;
		for (i = 0, j = 0; i < s_.length; i++) {
			if (m == 0) {
				if ((s_[i].idx >= 0) && (s_[i].y < y)) {
					y = s_[i].y;
					j = i;
				}
			}
			if (m == 1) {
				if ((s_[i].idx >= 0) && (s_[i].x < x)) {
					x = s_[i].x;
					j = i;
				}
			}
		}
		s.push(j);
		s_[j].idx = -1;
	}
	s_ = new Array();
	var l = Number.MAX_VALUE;
	var t = Number.MAX_VALUE;
	var r = Number.MIN_VALUE;
	var b = Number.MIN_VALUE;
	var w = 0;
	var h = 0;
	if (isNaN(parseInt(d))) {
		if (p) {
			for (i = 0; i < N; i++) {
				w += fw.selection[i].width;
				h += fw.selection[i].height;
				s_.push(fw.selection[i]);
			}
			dx = Math.round((fw.getDocumentDOM().width - w) / (N - 1));
			dy = Math.round((fw.getDocumentDOM().height - h) / (N - 1));
		}
		else {
			for (i = 0; i < N; i++) {
				l = Math.min(l, fw.selection[i].left);
				t = Math.min(t, fw.selection[i].top);
				r = Math.max(r, fw.selection[i].left + fw.selection[i].width);
				b = Math.max(b, fw.selection[i].top + fw.selection[i].height);
				w += fw.selection[i].width;
				h += fw.selection[i].height;
				s_.push(fw.selection[i]);
			}
			dx = Math.round((r - l - w) / (N - 1));
			dy = Math.round((b - t - h) / (N - 1));
		}
	}
	else {
		for (i = 0; i < N; i++) s_.push(fw.selection[i]);
		dx = parseInt(d);
		dy = parseInt(d);
	}
	if (p) {
		i = 0;
		fw.selection = [s_[s[i]]];
		x = (m == 0) ? fw.selection[0].left : 0;
		y = (m == 1) ? fw.selection[0].top : 0;
		fw.getDocumentDOM().moveSelectionTo({
			x: Math.round(x),
			y: Math.round(y)
		}, false, false);
		s_[s[i]] = fw.selection[0];
	}
	else {
		i = 1;
		x = s_[s[0]].left + s_[s[0]].width + dx;
		y = s_[s[0]].top + s_[s[0]].height + dy;
	}
	for (; i < N - 1; i++) {
		fw.selection = [s_[s[i]]];
		if (m == 0) {
			x = fw.selection[0].left;
		}
		if (m == 1) {
			y = fw.selection[0].top;
		}
		fw.getDocumentDOM().moveSelectionTo({
			x: Math.round(x),
			y: Math.round(y)
		}, false, false);
		if (m == 0) {
			y += fw.selection[0].height + dy;
		}
		if (m == 1) {
			x += fw.selection[0].width + dx;
		}
		s_[s[i]] = fw.selection[0];
	}
	if (isNaN(parseInt(d))) {
		if (p) {
			fw.selection = [s_[s[i]]];
			x = (m == 0) ? fw.selection[0].left : (fw.getDocumentDOM().width - fw.selection[0].width);
			y = (m == 1) ? fw.selection[0].top : (fw.getDocumentDOM().height - fw.selection[0].height);
			fw.getDocumentDOM().moveSelectionTo({
				x: Math.round(x),
				y: Math.round(y)
			}, false, false);
			s_[s[i]] = fw.selection[0];
		}
	}
	else {
		fw.selection = [s_[s[i]]];
		if (m == 0) {
			x = fw.selection[0].left;
		}
		if (m == 1) {
			y = fw.selection[0].top;
		}
		fw.getDocumentDOM().moveSelectionTo({
			x: Math.round(x),
			y: Math.round(y)
		}, false, false);
		s_[s[i]] = fw.selection[0];
	}
	fw.selection = s_;
}
