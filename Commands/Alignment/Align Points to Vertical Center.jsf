function PF_Selection(oSel) {
	this.items = new Array();
	this.newItems = new Array();
	if (oSel) {
		for (var i = 0; i < oSel.length; i++) this.items[i] = oSel[i];
	}
	this.length = this.items.length || 0;
}
PF_Selection.prototype.add = PF_SELECTION_addToSelection;
PF_Selection.prototype.addNew = PF_SELECTION_addNewToSelection;
PF_Selection.prototype.remove = PF_SELECTION_removeFromSelection;
PF_Selection.prototype.fw = PF_SELECTION_makeFWSelection;
PF_Selection.prototype.newfw = PF_SELECTION_makeFWSelectionFromNew;
PF_Selection.prototype.allfw = PF_SELECTION_makeFWSelectionFromAll;
PF_Selection.prototype.deleteOld = PF_SELECTION_deleteOldSelection;
PF_Selection.prototype.getSize = PF_SELECTION_getSelectionSize;

function PF_SELECTION_addToSelection(o) {
	this.items.push(o);
}

function PF_SELECTION_addNewToSelection(o) {
	this.newItems.push(o);
}

function PF_SELECTION_removeFromSelection(index, num) {
	this.items.splice(index, num);
}

function PF_SELECTION_makeFWSelection() {
	fw.selection = this.items;
}

function PF_SELECTION_makeFWSelectionFromNew() {
	fw.selection = this.newItems;
}

function PF_SELECTION_deleteOldSelection() {
	fw.selection = this.items;
	DOM.deleteSelection(false);
	DOM.deleteSelection(false);
}

function PF_SELECTION_getSelectionSize(index) {
	var temp = fw.selection;
	fw.selection = (index != undefined) ? this.items[index] : this.items;
	var sel = new Object();
	var selectBounds = fw.getDocumentDOM().getSelectionBounds();
	sel.left = selectBounds.left;
	sel.top = selectBounds.top;
	sel.right = selectBounds.right;
	sel.bottom = selectBounds.bottom;
	sel.width = sel.right - sel.left;
	sel.height = sel.bottom - sel.top;
	sel.midX = sel.left + sel.width / 2;
	sel.midY = sel.top + sel.height / 2;
	sel.type = "selection";
	fw.selection = temp;
	return sel;
}

function PF_SELECTION_makeFWSelectionFromAll() {
	var allItems = new Array();
	var j = 0;
	for (var i = 0; i < this.items.length; i++) {
		allItems[j] = this.items[i];
		j++;
	}
	for (var i = 0; i < this.newItems.length; i++) {
		allItems[j] = this.newItems[i];
		j++
	}
	fw.selection = allItems;
}

function Point2D(x, y, px, py, sx, sy) {
	this.x = x;
	this.y = y;
	this.px = (px == undefined) ? x : px;
	this.py = (py == undefined) ? y : py;
	this.sx = (sx == undefined) ? x : sx;
	this.sy = (sy == undefined) ? y : sy;
}

function PF_Point(node) {
	this.px = node.predX;
	this.py = node.predY;
	this.x = node.x;
	this.y = node.y;
	this.sx = node.succX;
	this.sy = node.succY;
}

function PF_Path(selectedPath, s) {
	this.selection = s;
	this.path = selectedPath;
	this.isClosed = this.path.contours[0].isClosed;
	this.anchors = new Array(this.path.contours[0].nodes.length);
	this.selAnchorsIndex = new Array();
	this.initialize();
}
PF_Path.prototype.initialize = PF_PATH_pfPathInit;
PF_Path.prototype.isCurvedVector = PF_PATH_isCurvedVector;
PF_Path.prototype.addAnchor = PF_PATH_addAnchorInPath;
PF_Path.prototype.removeAnchor = PF_PATH_removeAnchorFromPath;
PF_Path.prototype.close = PF_PATH_closePath;
PF_Path.prototype.redraw = PF_PATH_redrawPath;
PF_Path.prototype.handleDelta = PF_PATH_controlPointDelta;
PF_Path.prototype.reverseHandles = PF_PATH_reverseHandles;

function PF_PATH_pfPathInit() {
	for (var i = 0; i < this.path.contours[0].nodes.length; i++) {
		this.anchors[i] = new PF_Point(this.path.contours[0].nodes[i]);
		if (this.path.contours[0].nodes[i].isSelectedPoint) this.selAnchorsIndex.push(
			i);
	}
}

function PF_PATH_isCurvedVector(anchorIndex, sDirection) {
	var nextIndex = (sDirection == "next") ? anchorIndex + 1 : anchorIndex - 1;
	if (nextIndex == -1) nextIndex = this.anchors.length - 1;
	else if (nextIndex == this.anchors.length) nextIndex = 0;
	var cur = this.anchors[anchorIndex];
	var nxt = this.anchors[nextIndex];
	switch (sDirection) {
		case "next":
			if (cur.x != cur.sx || cur.y != cur.sy || nxt.x != nxt.px || nxt.y != nxt.py)
				return true;
		default:
			if (!this.isClosed)
				if (cur.x != cur.sx || cur.y != cur.sy || nxt.x != nxt.px || nxt.y != nxt.py)
					return true;
				else if (cur.x != cur.px || cur.y != cur.py || nxt.x != cur.sx || nxt.y !=
				nxt.sy) return true;
	}
	return false;
}

function PF_PATH_addAnchorInPath(prevIndex, point) {
	this.anchors.splice(prevIndex + 1, 0, point);
}

function PF_PATH_removeAnchorFromPath(index) {
	this.anchors.splice(index, 1);
}

function PF_PATH_closePath() {
	DOM.joinPaths();
}

function PF_PATH_redrawPath() {
	DOM.addNewSinglePointPath({
		x: this.anchors[0].px,
		y: this.anchors[0].py
	}, {
		x: this.anchors[0].x,
		y: this.anchors[0].y
	}, {
		x: this.anchors[0].sx,
		y: this.anchors[0].sy
	}, false);
	for (var i = 1; i < this.anchors.length; i++) DOM.appendPointToPath(0, i, {
		x: this.anchors[i].px,
		y: this.anchors[i].py
	}, {
		x: this.anchors[i].x,
		y: this.anchors[i].y
	}, {
		x: this.anchors[i].sx,
		y: this.anchors[i].sy
	});
	if (this.isClosed) this.close();
	fw.selection[0].pathAttributes = this.path.pathAttributes;
	fw.selection[0].opacity = this.path.opacity;
	fw.selection[0].effectList = this.path.effectList;
	fw.selection[0].blendMode = this.path.blendMode;
	this.selection.addNew(fw.selection[0]);
}

function PF_PATH_controlPointDelta(index, b) {
	var a = this.anchors[index];
	if (b) return Math.sqrt(Math.pow((a.sx - a.x), 2) + Math.pow((a.sy - a.y), 2));
	else return Math.sqrt(Math.pow((a.x - a.px), 2) + Math.pow((a.y - a.py), 2));
}

function PF_PATH_reverseHandles() {
	for (var i = 0; i < this.anchors.length; i++) {
		var px = this.anchors[i].px;
		var py = this.anchors[i].py;
		var sx = this.anchors[i].sx;
		var sy = this.anchors[i].sy;
		this.anchors[i].px = sx;
		this.anchors[i].py = sy;
		this.anchors[i].sx = px;
		this.anchors[i].sy = py;
	}
}
DOM = fw.getDocumentDOM();
var ANCHOR_TYPE = 1;
var ALIGNMENT_TYPE = 3;
var s = new PF_Selection(fw.selection);
var selVertices = new Array();
getAllSelectedAnchors();

function getAllSelectedAnchors() {
	for (var i = 0; i < s.items.length; i++) {
		var tempp = new PF_Path(s.items[i], s);
		for (var j = 0; j < tempp.selAnchorsIndex.length; j++) {
			selVertices.push(tempp.anchors[tempp.selAnchorsIndex[j]]);
		}
	}
}

function CompareLeft(a, b) {
	return a.x - b.x;
}

function CompareLeft_P(a, b) {
	return a.px - b.px;
}

function CompareLeft_S(a, b) {
	return a.sx - b.sx;
}

function CompareRight(a, b) {
	return b.x - a.x;
}

function CompareRight_P(a, b) {
	return b.px - a.px;
}

function CompareRight_S(a, b) {
	return b.sx - a.sx;
}

function CompareTop(a, b) {
	return a.y - b.y;
}

function CompareTop_P(a, b) {
	return a.py - b.py;
}

function CompareTop_S(a, b) {
	return a.sy - b.sy;
}

function CompareBottom(a, b) {
	return b.y - a.y;
}

function CompareBottom_P(a, b) {
	return b.py - a.py;
}

function CompareBottom_S(a, b) {
	return b.sy - a.sy;
}

function sortAnchors(alignType, anchorType, pointArray) {
	var align = "";
	var atype = "";
	switch (alignType) {
		case 1:
			align = "Left";
			break;
		case 2:
			align = "HorizCenter";
			break;
		case 3:
			align = "Right";
			break;
		case 4:
			align = "Top";
			break;
		case 5:
			align = "VertCenter";
			break;
		case 6:
			align = "Bottom";
			break;
	}
	switch (anchorType) {
		case 2:
			atype = "_P";
			break;
		case 3:
			atype = "_S";
			break;
	}
	var sFunc = "Compare" + align + atype;
	pointArray.sort(eval(sFunc));
}

function AlignAnchors() {
	var dPoint;
	if (ALIGNMENT_TYPE == 2) {
		sortAnchors(1, ANCHOR_TYPE, selVertices);
		var x = selVertices[0].x + (selVertices[selVertices.length - 1].x -
			selVertices[0].x) / 2;
		var y = -1;
		dPoint = new Point2D(x, y);
	} else if (ALIGNMENT_TYPE == 5) {
		sortAnchors(4, ANCHOR_TYPE, selVertices);
		var x = -1;
		var y = selVertices[0].y + (selVertices[selVertices.length - 1].y -
			selVertices[0].y) / 2;
		dPoint = new Point2D(x, y);
	} else {
		sortAnchors(ALIGNMENT_TYPE, ANCHOR_TYPE, selVertices);
		var iAnchor = selVertices[0];
		dPoint = new Point2D(iAnchor.x, iAnchor.y, iAnchor.px, iAnchor.py, iAnchor.sx,
			iAnchor.sy);
	}
	for (var i = 0; i < s.items.length; i++) {
		var tempp = new PF_Path(s.items[i], s);
		for (var j = 0; j < tempp.selAnchorsIndex.length; j++) {
			var k = tempp.selAnchorsIndex[j];
			if (ANCHOR_TYPE == 1) {
				if (ALIGNMENT_TYPE == 1 || ALIGNMENT_TYPE == 2 || ALIGNMENT_TYPE == 3) {
					var dpx = tempp.anchors[k].px - tempp.anchors[k].x;
					var dsx = tempp.anchors[k].sx - tempp.anchors[k].x;
					fw.selection[i].contours[0].nodes[k].x = dPoint.x;
					fw.selection[i].contours[0].nodes[k].succX = dPoint.x + dsx;
					fw.selection[i].contours[0].nodes[k].predX = dPoint.x + dpx;
				} else {
					var dpy = tempp.anchors[k].py - tempp.anchors[k].y;
					var dsy = tempp.anchors[k].sy - tempp.anchors[k].y;
					fw.selection[i].contours[0].nodes[k].y = dPoint.y;
					fw.selection[i].contours[0].nodes[k].succY = dPoint.y + dsy;
					fw.selection[i].contours[0].nodes[k].predY = dPoint.y + dpy;
				}
			}
			if (ANCHOR_TYPE == 2) {
				if (ALIGNMENT_TYPE == 1 || ALIGNMENT_TYPE == 2 || ALIGNMENT_TYPE == 3) {
					fw.selection[i].contours[0].nodes[k].predX = dPoint.px;
				} else {
					fw.selection[i].contours[0].nodes[k].predY = dPoint.py;
				}
			}
			if (ANCHOR_TYPE == 3) {
				if (ALIGNMENT_TYPE == 1 || ALIGNMENT_TYPE == 2 || ALIGNMENT_TYPE == 3) {
					fw.selection[i].contours[0].nodes[k].succX = dPoint.sx;
				} else {
					fw.selection[i].contours[0].nodes[k].succY = dPoint.sy;
				}
			}
		}
	}
}

function FlashExchange(alignType, anchorType) {
	ANCHOR_TYPE = anchorType;
	ALIGNMENT_TYPE = alignType;
	if (selVertices.length > 1) AlignAnchors();
}
FlashExchange(5, 1);